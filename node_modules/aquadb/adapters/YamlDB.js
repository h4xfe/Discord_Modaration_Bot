"use strict";

const { baseSet, baseGet, baseDelete } = require("../Util");
let fs = require("fs");
let YAML;

/**
 * @class
 * @description YamlDB adapter.
 */
class YamlDB {
  constructor(options) {
    this.name = options.name;

    try {
      fs = require("graceful-fs");
    } catch (err) {
      if (options.ignoreWarns === false) console.error("\"graceful-fs\" better than \"fs\". You can install this.");
      fs = require("fs");
    }

    try {
        YAML = require("yaml");
    } catch(err) {
        throw new TypeError("You must install \"yaml\".");
    }

    if (options.autoFile === true && fs.existsSync(`./${this.name}.yml`) === false) {
      fs.writeFileSync(`./${this.name}.yml`, "");
   } else {
     if (fs.lstatSync(`./${this.name}.yml`).isDirectory() === true) {
       throw new TypeError(`"${this.name}.yml" should be a file.`);
     }
   }
  }

  set(key, value) {
    let data = this.all();
    data = baseSet(data, key, value);
    fs.writeFileSync(`./${this.name}.yml`, YAML.stringify(data));
    return this.get(key);
  }

  get(key) {
    let data = this.all();
    return baseGet(data, key);
  }

  delete(key) {
    let data = this.all();
    data = baseDelete(data, key);
    if (Object.keys(data).length === 0) data = "";
    fs.writeFileSync(`./${this.name}.yml`, data === "" ? "" : YAML.stringify(data));
    return true;
  }

  all() {
    let data = fs.readFileSync(`./${this.name}.yml`, "utf8");
    data = ((YAML.parse(data) === null) ? {} : YAML.parse(data));
    return data;
  }

  deleteAll() {
    fs.writeFileSync(`./${this.name}.yml`, "");
    return true;
  }
}

module.exports = YamlDB;
