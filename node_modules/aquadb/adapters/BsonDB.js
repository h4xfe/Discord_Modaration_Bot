"use strict";

const { baseSet, baseGet, baseDelete } = require("../Util");
const util = require("util");
let fs = require("fs");
let BSON;

/**
 * @class
 * @description BsonDB adapter.
 */
class BsonDB {
  constructor(options) {
    this.name = options.name;

    try {
      fs = require("graceful-fs");
    } catch (err) {
      if (options.ignoreWarns === false) console.error("\"graceful-fs\" better than \"fs\". You can install this.");
      fs = require("fs");
    }

    try {
        BSON = require("bson");
    } catch(err) {
        throw new TypeError("You must install \"bson\".");
    }

    if (options.autoFile === true && fs.existsSync(`./${this.name}.bson`) === false) {
      fs.writeFileSync(`./${this.name}.bson`, "");
    } else {
      if (fs.lstatSync(`./${this.name}.bson`).isDirectory() === true) {
        throw new TypeError(`"${this.name}.bson" should be a file.`);
      } else {
        let data = fs.readFileSync(`./${this.name}.bson`, "utf8");
        if (util.isBuffer(data) === false) {
          fs.writeFileSync(`./${this.name}.bson`, "");
        }
      }
    }
  }

  set(key, value) {
    let data = this.all();
    data = baseSet(data, key, value);
    fs.writeFileSync(`./${this.name}.bson`, BSON.serialize(data));
    return this.get(key);
  }

  get(key) {
    let data = this.all();
    return baseGet(data, key);
  }

  delete(key) {
    let data = this.all();
    data = baseDelete(data, key);
    if (Object.keys(data).length === 0) data = "";
    fs.writeFileSync(`./${this.name}.bson`, data === "" ? "" : BSON.serialize(data));
    return true;
  }

  all() {
    let data = fs.readFileSync(`./${this.name}.bson`);
    data = ((data.length === 0) ? {} : ((BSON.deserialize(data) === null) ? {} : BSON.deserialize(data)));
    return data;
  }

  deleteAll() {
    fs.writeFileSync(`./${this.name}.bson`, "");
    return true;
  }
}

module.exports = BsonDB;
