"use strict";

const { baseSet, baseGet, baseDelete } = require("../Util");
const util = require("util");
let fs = require("fs");

/**
 * @class
 * @description JsonDB adapter.
 */
class JsonDB {
  constructor(options) {
    this.name = options.name;

    try {
      fs = require("graceful-fs");
    } catch (err) {
      if (options.ignoreWarns === false) console.error("\"graceful-fs\" better than \"fs\". You can install this.");
      fs = require("fs");
    }

    if (options.autoFile === true && fs.existsSync(`./${this.name}.json`) === false) {
       fs.writeFileSync(`./${this.name}.json`, "{}");
    } else {
      if (fs.lstatSync(`./${this.name}.json`).isDirectory() === true) {
        throw new TypeError(`"${this.name}.json" should be a file.`);
      } else {
        try {
          let data = JSON.parse(fs.readFileSync(`./${this.name}.json`, "utf8"));
          if (util.isObject(data) === false) {
            fs.writeFileSync(`./${this.name}.json`, "{}");
          }
        } catch(err) {
          fs.writeFileSync(`./${this.name}.json`, "{}");
        }
      }
    }
  }

  set(key, value) {
    let data = this.all();
    data = baseSet(data, key, value);
    fs.writeFileSync(`./${this.name}.json`, JSON.stringify(data, null, 2));
    return this.get(key);
  }

  get(key) {
    let data = this.all();
    return baseGet(data, key);
  }

  delete(key) {
    let data = this.all();
    data = baseDelete(data, key);
    fs.writeFileSync(`./${this.name}.json`, JSON.stringify(data, null, 2));
    return true;
  }

  all() {
    let data = fs.readFileSync(`./${this.name}.json`, "utf8");
    return JSON.parse(data);
  }

  deleteAll() {
    fs.writeFileSync(`./${this.name}.json`, "{}");
    return true;
  }
}

module.exports = JsonDB;
